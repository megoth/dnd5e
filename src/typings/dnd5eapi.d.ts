/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all resource URLs.
     * @description Making a request to the API's base URL returns an object containing available endpoints.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              [key: string]: string;
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/{endpoint}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get list of all available resources for an endpoint.
     * @description Currently only the [`/spells`](#get-/api/spells) and [`/monsters`](#get-/api/monsters) endpoints support filtering with query parameters. Use of these query parameters is documented under the respective [Spells](#tag--Spells) and [Monsters](#tag--Monsters) sections.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          endpoint: components["parameters"]["base-endpoint-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/ability-scores/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get an ability score by index.
     * @description # Ability Score
     *
     *     Represents one of the six abilities that describes a creature's physical and mental characteristics. The three main rolls of the game - the ability check, the saving throw, and the attack roll - rely on the ability scores. [[SRD p76](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=76)]
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the ability score to get.
           *      */
          index: components["parameters"]["ability-score-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["AbilityScore"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/alignments/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get an alignment by index.
     * @description # Alignment
     *
     *     A typical creature in the game world has an alignment, which broadly describes its moral and personal attitudes. Alignment is a combination of two factors: one identifies morality (good, evil, or neutral), and the other describes attitudes toward society and order (lawful, chaotic, or neutral). Thus, nine distinct alignments define the possible combinations.[[SRD p58](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=58)]
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the alignment to get.
           *      */
          index: components["parameters"]["alignment-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Alignment"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/backgrounds/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a background by index.
     * @description # Background
     *
     *     Every story has a beginning. Your character's background reveals where you came from, how you became an adventurer, and your place in the world. Choosing a background provides you with important story cues about your character's identity. [[SRD p60](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=60)]
     *
     *     _Note:_ acolyte is the only background included in the SRD.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the background to get.
           *      */
          index: components["parameters"]["background-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Background"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/classes/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a class by index.
     * @description # Class
     *
     *     A character class is a fundamental part of the identity and nature of
     *     characters in the Dungeons & Dragons role-playing game. A character's
     *     capabilities, strengths, and weaknesses are largely defined by its class.
     *     A character's class affects a character's available skills and abilities. [[SRD p8-55](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=8)]
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the class to get.
           *      */
          index: components["parameters"]["class-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Class"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/classes/{index}/subclasses": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get subclasses available for a class. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the class to get.
           *      */
          index: components["parameters"]["class-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/classes/{index}/spells": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get spells available for a class. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the class to get.
           *      */
          index: components["parameters"]["class-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ClassSpellList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/classes/{index}/spellcasting": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get spellcasting info for a class. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the class to get.
           *      */
          index: components["parameters"]["class-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Spellcasting"];
          };
        };
        /** @description Not found. */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["error-response"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/classes/{index}/features": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get features available for a class. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the class to get.
           *      */
          index: components["parameters"]["class-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of features for the class. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/classes/{index}/proficiencies": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get proficiencies available for a class. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the class to get.
           *      */
          index: components["parameters"]["class-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of proficiencies for the class. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/classes/{index}/multi-classing": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get multiclassing resource for a class. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the class to get.
           *      */
          index: components["parameters"]["class-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Multiclassing"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/classes/{index}/levels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all level resources for a class. */
    get: {
      parameters: {
        query?: {
          /** @description Adds subclasses for class to the response */
          subclass?: components["parameters"]["levels-subclass-filter"];
        };
        header?: never;
        path: {
          /** @description The `index` of the class to get.
           *      */
          index: components["parameters"]["class-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ClassLevel"][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/classes/{index}/levels/{class_level}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get level resource for a class and level. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the class to get.
           *      */
          index: components["parameters"]["class-index"];
          class_level: components["parameters"]["class-level"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ClassLevel"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/classes/{index}/levels/{class_level}/features": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get features available to a class at the requested level. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the class to get.
           *      */
          index: components["parameters"]["class-index"];
          class_level: components["parameters"]["class-level"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/classes/{index}/levels/{spell_level}/spells": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get spells of the requested level available to the class. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the class to get.
           *      */
          index: components["parameters"]["class-index"];
          spell_level: components["parameters"]["spell-level"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/conditions/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a condition by index.
     * @description # Condition
     *
     *     A condition alters a creature’s capabilities in a variety of ways and can
     *     arise as a result of a spell, a class feature, a monster’s attack, or other
     *     effect. Most conditions, such as blinded, are impairments, but a few, such
     *     as invisible, can be advantageous.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the condition to get.
           *      */
          index: components["parameters"]["condition-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Condition"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/damage-types/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a damage type by index.
     * @description # Damage type
     *
     *     Different attacks, damaging spells, and other harmful effects deal different
     *     types of damage. Damage types have no rules of their own, but other rules,
     *     such as damage resistance, rely on the types.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the damage type to get.
           *      */
          index: components["parameters"]["damage-type-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["DamageType"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/equipment/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get an equipment item by index.
     * @description # Equipment
     *
     *     Opportunities abound to find treasure, equipment, weapons, armor, and more
     *     in the dungeons you explore. Normally, you can sell your treasures and
     *     trinkets when you return to a town or other settlement, provided that you
     *     can find buyers and merchants interested in your loot.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the equipment to get.
           *
           *     Available values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `equipment`.
           *      */
          index: components["parameters"]["equipment-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Equipment"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/equipment-categories/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get an equipment category by index.
     * @description These are the categories that various equipment fall under.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description The `index` of the equipment category score to get.
           *
           *     Available values can be found in the resource list for this endpoint.
           *
           * @example waterborne-vehicles
           */
          index: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["EquipmentCategory"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/feats/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a feat by index.
     * @description # Feat
     *
     *     A feat is a boon a character can receive at level up instead of an ability score increase.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the feat to get.
           *      */
          index: "grappler";
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Feat"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/features/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a feature by index.
     * @description # Feature
     *
     *     When you gain a new level in a class, you get its features for that level.
     *     You don’t, however, receive the class’s starting Equipment, and a few
     *     features have additional rules when you’re multiclassing: Channel Divinity,
     *     Extra Attack, Unarmored Defense, and Spellcasting.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description The `index` of the feature to get.
           *
           *     Available values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `features`.
           *
           * @example action-surge-1-use
           */
          index: components["parameters"]["feature-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Feature"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/languages/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a language by index.
     * @description # Language
     *
     *     Your race indicates the languages your character can speak by default, and your background might give you access to one or more additional languages of your choice. [[SRD p59](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=59)]
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the language to get.
           *      */
          index: components["parameters"]["language-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Language"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/magic-items/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a magic item by index.
     * @description These are the various magic items you can find in the game.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /**
           * @description The `index` of the magic item to get.
           *
           *     Available values can be found in the resource list for this endpoint.
           *
           * @example adamantine-armor
           */
          index: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["MagicItem"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/magic-schools/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a magic school by index.
     * @description # Magic School
     *
     *     Academies of magic group spells into eight categories called schools of
     *     magic. Scholars, particularly wizards, apply these categories to all spells,
     *     believing that all magic functions in essentially the same way, whether it
     *     derives from rigorous study or is bestowed by a deity.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the magic school to get.
           *      */
          index: components["parameters"]["magic-school-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["MagicSchool"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/monsters": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get list of monsters with optional filtering */
    get: {
      parameters: {
        query?: {
          /** @description The challenge rating or ratings to filter on. */
          challenge_rating?: components["parameters"]["challenge-rating-filter"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/monsters/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get monster by index. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the `Monster` to get.
           *      */
          index: components["parameters"]["monster-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Monster"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/proficiencies/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a proficiency by index.
     * @description # Proficiency
     *
     *     By virtue of race, class, and background a character is proficient at using certain skills, weapons, and equipment. Characters can also gain additional proficiencies at higher levels or by multiclassing. A characters starting proficiencies are determined during character creation.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the proficiency to get.
           *
           *     Available values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `proficiencies`.
           *      */
          index: components["parameters"]["proficiency-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Proficiency"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/races/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a race by index.
     * @description Each race grants your character ability and skill bonuses as well as racial traits.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the race to get.
           *      */
          index: components["parameters"]["race-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Race"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/races/{index}/subraces": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get subraces available for a race. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the race to get.
           *      */
          index: components["parameters"]["race-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of subraces for the race. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/races/{index}/proficiencies": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get proficiencies available for a race. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the race to get.
           *      */
          index: components["parameters"]["race-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of proficiencies for the race. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/races/{index}/traits": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get traits available for a race. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the race to get.
           *      */
          index: components["parameters"]["race-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of traits for the race. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/rule-sections/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a rule section by index.
     * @description Rule sections represent a sub-heading and text that can be found underneath a rule heading in the SRD.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the rule section to get.
           *      */
          index: components["parameters"]["rule-section-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["RuleSection"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/rules/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a rule by index.
     * @description # Rule
     *
     *     Rules are pages in the SRD that document the mechanics of Dungeons and Dragons.
     *     Rules have descriptions which is the text directly underneath the rule heading
     *     in the SRD. Rules also have subsections for each heading underneath the rule in the SRD.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the rule to get.
           *      */
          index: components["parameters"]["rule-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Rule"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/skills/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a skill by index.
     * @description # Skill
     *
     *     Each ability covers a broad range of capabilities, including skills that a character or a monster can be proficient in. A skill represents a specific aspect of an ability score, and an individual's proficiency in a skill demonstrates a focus on that aspect. [[SRD p77](https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf#page=77)]
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the skill to get.
           *      */
          index: components["parameters"]["skill-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Skill"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/spells": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get list of spells with optional filtering. */
    get: {
      parameters: {
        query?: {
          /** @description The level or levels to filter on. */
          level?: components["parameters"]["level-filter"];
          /** @description The magic school or schools to filter on. */
          school?: components["parameters"]["school-filter"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/spells/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a spell by index. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the `Spell` to get.
           *
           *     Available values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `spells`.
           *      */
          index: components["parameters"]["spell-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Spell"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/subclasses/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a subclass by index.
     * @description Subclasses reflect the different paths a class may take as levels are gained.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the subclass to get.
           *      */
          index: components["parameters"]["subclass-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Subclass"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/subclasses/{index}/features": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get features available for a subclass. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the subclass to get.
           *      */
          index: components["parameters"]["subclass-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of features for the subclass. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/subclasses/{index}/levels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all level resources for a subclass. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the subclass to get.
           *      */
          index: components["parameters"]["subclass-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of level resource for the subclass. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["SubclassLevelResource"][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/subclasses/{index}/levels/{subclass_level}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get level resources for a subclass and level. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the subclass to get.
           *      */
          index: components["parameters"]["subclass-index"];
          /** @example 6 */
          subclass_level: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Level resource for the subclass and level. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["SubclassLevel"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/subclasses/{index}/levels/{subclass_level}/features": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get features of the requested spell level available to the class. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the subclass to get.
           *      */
          index: components["parameters"]["subclass-index"];
          /** @example 6 */
          subclass_level: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of features for the subclass and level. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/subraces/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a subrace by index.
     * @description Subraces reflect the different varieties of a certain parent race.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the subrace to get.
           *      */
          index: components["parameters"]["subrace-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Subrace"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/subraces/{index}/proficiencies": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get proficiences available for a subrace. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the subrace to get.
           *      */
          index: components["parameters"]["subrace-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of proficiences for the subrace. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/subraces/{index}/traits": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get traits available for a subrace. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the subrace to get.
           *      */
          index: components["parameters"]["subrace-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of traits for the subrace. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["APIReferenceList"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/traits/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a trait by index. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the `Trait` to get. */
          index: components["parameters"]["trait-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Trait"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/weapon-properties/{index}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a weapon property by index. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The `index` of the weapon property to get.
           *      */
          index: components["parameters"]["weapon-property-index"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["WeaponProperty"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description `APIReference`
     *      */
    APIReference: {
      /** @description Resource index for shorthand searching. */
      index?: string;
      /** @description Name of the referenced resource. */
      name?: string;
      /** @description URL of the referenced resource. */
      url?: string;
    };
    /** @description `APIReferenceList`
     *      */
    APIReferenceList: {
      /** @description Total number of resources available. */
      count?: number;
      results?: components["schemas"]["APIReference"][];
    };
    /** @description `Damage`
     *      */
    Damage: {
      damage_dice?: string;
      damage_type?: components["schemas"]["APIReference"];
    };
    /** @description `Choice`
     *      */
    Choice: {
      /** @description Description of the choice to be made. */
      desc?: string;
      /** @description Number of items to pick from the list. */
      choose?: number;
      /** @description Type of the resources to choose from. */
      type?: string;
      from?: components["schemas"]["OptionSet"];
    };
    AreaOfEffect: {
      size?: number;
      /** @enum {string} */
      type?: "sphere" | "cone" | "cylinder" | "line" | "cube";
    };
    /** @description `Prerequisite`
     *      */
    Prerequisite: {
      ability_score?: components["schemas"]["APIReference"];
      /** @description Minimum score to meet the prerequisite. */
      minimum_score?: number;
    };
    ResourceDescription: {
      /** @description Description of the resource. */
      desc?: string[];
    };
    /** @description `AbilityScore`
     *      */
    AbilityScore: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] & {
        /** @description Full name of the ability score. */
        full_name?: string;
        /** @description List of skills that use this ability score. */
        skills?: components["schemas"]["APIReference"][];
      };
    /** @description `Alignment`
     *      */
    Alignment: components["schemas"]["APIReference"] & {
      /** @description Brief description of the resource. */
      desc?: string;
      /** @description Abbreviation/initials/acronym for the alignment. */
      abbreviation?: string;
    };
    /** @description `Class`
     *      */
    Class: components["schemas"]["APIReference"] & {
      /** @description Hit die of the class. (ex: 12 == 1d12). */
      hit_die?: number;
      /** @description URL of the level resource for the class. */
      class_levels?: string;
      multi_classing?: components["schemas"]["Multiclassing"];
      spellcasting?: components["schemas"]["Spellcasting"];
      /** @description URL of the spell resource list for the class. */
      spells?: string;
      /** @description List of equipment and their quantities all players of the class start with. */
      starting_equipment?: {
        quantity?: number;
        equipment?: components["schemas"]["APIReference"];
      }[];
      /** @description List of choices of starting equipment. */
      starting_equipment_options?: components["schemas"]["Choice"][];
      /** @description List of choices of starting proficiencies. */
      proficiency_choices?: components["schemas"]["Choice"][];
      /** @description List of starting proficiencies for all new characters of this class. */
      proficiencies?: components["schemas"]["APIReference"][];
      /** @description Saving throws the class is proficient in. */
      saving_throws?: components["schemas"]["APIReference"][];
      /** @description List of all possible subclasses this class can specialize in. */
      subclasses?: components["schemas"]["APIReference"][];
    };
    /** @description `Multiclassing`
     *      */
    Multiclassing: {
      /** @description List of prerequisites that must be met. */
      prerequisites?: components["schemas"]["Prerequisite"][];
      /** @description List of choices of prerequisites to meet for. */
      prerequisite_options?: components["schemas"]["Choice"][];
      /** @description List of proficiencies available when multiclassing. */
      proficiencies?: components["schemas"]["APIReference"][];
      /** @description List of choices of proficiencies that are given when multiclassing. */
      proficiency_choices?: components["schemas"]["Choice"][];
    };
    /** @description `Spellcasting`
     *      */
    Spellcasting: {
      /** @description Level at which the class can start using its spellcasting abilities. */
      level?: number;
      /** @description Descriptions of the class' ability to cast spells. */
      info?: {
        /** @description Feature name. */
        name?: string;
        /** @description Feature description. */
        desc?: string[];
      }[];
      /** @description Reference to the `AbilityScore` used for spellcasting by the class. */
      spellcasting_ability?: components["schemas"]["APIReference"];
    };
    /** @description `Gear`
     *      */
    Gear: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] & {
        equipment_category?: components["schemas"]["APIReference"];
        gear_category?: components["schemas"]["APIReference"];
        cost?: components["schemas"]["Cost"];
        /** @description How much the equipment weighs. */
        weight?: number;
      };
    /** @description `EquipmentPack`
     *      */
    EquipmentPack: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] & {
        equipment_category?: components["schemas"]["APIReference"];
        gear_category?: components["schemas"]["APIReference"];
        cost?: components["schemas"]["Cost"];
        /** @description The list of adventuring gear in the pack. */
        contents?: components["schemas"]["APIReference"][];
      };
    /** @description `EquipmentCategory`
     *      */
    EquipmentCategory: components["schemas"]["APIReference"] & {
      /** @description A list of the equipment that falls into this category. */
      equipment?: components["schemas"]["APIReference"][];
    };
    /** @description `Equipment`
     *      */
    Equipment:
      | components["schemas"]["Weapon"]
      | components["schemas"]["Armor"]
      | components["schemas"]["Gear"]
      | components["schemas"]["EquipmentPack"];
    /** @description `Cost`
     *      */
    Cost: {
      /** @description Numerical amount of coins. */
      quantity?: number;
      /** @description Unit of coinage. */
      unit?: string;
    };
    /** @description `Weapon`
     *      */
    Weapon: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] & {
        equipment_category?: components["schemas"]["APIReference"];
        /** @description The category of weapon this falls into. */
        weapon_category?: string;
        /** @description Whether this is a Melee or Ranged weapon. */
        weapon_range?: string;
        /** @description A combination of weapon_category and weapon_range. */
        category_range?: string;
        range?: {
          /** @description The weapon's normal range in feet. */
          normal?: number;
          /** @description The weapon's long range in feet. */
          long?: number;
        };
        damage?: components["schemas"]["Damage"];
        two_handed_damage?: components["schemas"]["Damage"];
        /** @description A list of the properties this weapon has. */
        properties?: components["schemas"]["APIReference"][];
        cost?: components["schemas"]["Cost"];
        /** @description How much the equipment weighs. */
        weight?: number;
      };
    /** @description `Armor`
     *      */
    Armor: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] & {
        equipment_category?: components["schemas"]["APIReference"];
        /** @description The category of armor this falls into. */
        armor_category?: string;
        /** @description Details on how to calculate armor class. */
        armor_class?: {
          [key: string]: string;
        };
        /** @description Minimum STR required to use this armor. */
        str_minimum?: number;
        /** @description Whether the armor gives disadvantage for Stealth. */
        stealth_disadvantage?: boolean;
        cost?: components["schemas"]["Cost"];
        /** @description How much the equipment weighs. */
        weight?: number;
      };
    /** @description `MagicItem`
     *      */
    MagicItem: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] & {
        /** @description The image url of the magic item. */
        image?: string;
        equipment_category?: components["schemas"]["APIReference"];
        rarity?: {
          /**
           * @description The rarity of the item.
           * @enum {string}
           */
          name?:
            | "Varies"
            | "Common"
            | "Uncommon"
            | "Rare"
            | "Very Rare"
            | "Legendary"
            | "Artifact";
        };
        variants?: components["schemas"]["APIReference"][];
        /** @description Whether this is a variant or not */
        variant?: boolean;
      };
    /** @description `DamageType`
     *      */
    DamageType: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"];
    /** @description 'Spell Damage'
     *      */
    DamageAtCharacterLevel: {
      damage_at_character_level?: {
        [key: string]: unknown;
      };
      damage_type?: components["schemas"]["APIReference"];
    };
    /** @description 'Spell Damage'
     *      */
    DamageAtSlotLevel: {
      damage_at_slot_level?: {
        [key: string]: unknown;
      };
      damage_type?: components["schemas"]["APIReference"];
    };
    /** @description `Condition`
     *      */
    Condition: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"];
    /** @description `MagicSchool`
     *      */
    MagicSchool: components["schemas"]["APIReference"] & {
      /** @description Brief description of the resource. */
      desc?: string;
    };
    /** @description `Skill`
     *      */
    Skill: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] & {
        ability_score?: components["schemas"]["APIReference"];
      };
    /** @description `Proficiency`
     *      */
    Proficiency: components["schemas"]["APIReference"] & {
      /** @description The general category of the proficiency. */
      type?: string;
      /** @description Classes that start with this proficiency. */
      classes?: components["schemas"]["APIReference"][];
      /** @description Races that start with this proficiency. */
      races?: components["schemas"]["APIReference"][];
      /** @description `APIReference` to the full description of the related resource.
       *      */
      reference?: components["schemas"]["APIReference"];
    };
    /** @description `Language`
     *      */
    Language: components["schemas"]["APIReference"] & {
      /** @description Brief description of the language. */
      desc?: string;
      /** @enum {string} */
      type?: "Standard" | "Exotic";
      /** @description Script used for writing in the language. */
      script?: string;
      /** @description List of races that tend to speak the language. */
      typical_speakers?: string[];
    };
    /** @description `Background`
     *      */
    Background: components["schemas"]["APIReference"] & {
      /** @description Starting proficiencies for all new characters of this background. */
      starting_proficiencies?: components["schemas"]["APIReference"][];
      /** @description List of equipment and their quantities all players of the class start with. */
      starting_equipment?: {
        quantity?: number;
        equipment?: components["schemas"]["APIReference"];
      }[];
      /** @description List of choices of starting equipment. */
      starting_equipment_options?: components["schemas"]["Choice"][];
      language_options?: components["schemas"]["Choice"];
      /** @description Special feature granted to new characters of this background. */
      feature?: {
        name?: string;
        desc?: string[];
      };
      personality_traits?: components["schemas"]["Choice"];
      ideals?: components["schemas"]["Choice"];
      bonds?: components["schemas"]["Choice"];
      flaws?: components["schemas"]["Choice"];
    };
    /** @description `Feat`
     *      */
    Feat: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] & {
        /** @description An object of APIReferences to ability scores and minimum scores. */
        prerequisites?: components["schemas"]["Prerequisite"][];
      };
    /** @description `Subclass`
     *      */
    Subclass: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] & {
        class?: components["schemas"]["APIReference"];
        /** @description Lore-friendly flavor text for a classes respective subclass. */
        subclass_flavor?: string;
        /** @description Resource url that shows the subclass level progression. */
        subclass_levels?: string;
        spells?: {
          prerequisites?: components["schemas"]["SpellPrerequisite"][];
          spell?: components["schemas"]["APIReference"];
        }[];
      };
    /** @description `SubclassLevel`
     *      */
    SubclassLevel: {
      /** @description Resource index for shorthand searching. */
      index?: string;
      /** @description URL of the referenced resource. */
      url?: string;
      /** @description Number value for the current level object. */
      level?: number;
      /** @description Total number of ability score bonuses gained, added from previous levels. */
      ability_score_bonuses?: number;
      /** @description Proficiency bonus for this class at the specified level. */
      prof_bonus?: number;
      /** @description List of features gained at this level. */
      features?: components["schemas"]["APIReference"][];
      /** @description Summary of spells known at this level. */
      spellcasting?: {
        cantrips_known?: number;
        spells_known?: number;
        spell_slots_level_1?: number;
        spell_slots_level_2?: number;
        spell_slots_level_3?: number;
        spell_slots_level_4?: number;
        spell_slots_level_5?: number;
        spell_slots_level_6?: number;
        spell_slots_level_7?: number;
        spell_slots_level_8?: number;
        spell_slots_level_9?: number;
      };
      /** @description Class specific information such as dice values for bard songs and number of warlock invocations. */
      classspecific?: {
        [key: string]: unknown;
      };
    };
    SubclassLevelResource: {
      index?: string;
      url?: string;
      level?: number;
      features?: components["schemas"]["APIReference"][];
      class?: components["schemas"]["APIReference"];
      subclass?: components["schemas"]["APIReference"];
    };
    /** @description `ClassLevel`
     *      */
    ClassLevel: {
      /** @description Resource index for shorthand searching. */
      index?: string;
      /** @description URL of the referenced resource. */
      url?: string;
      /** @description The number value for the current level object. */
      level?: number;
      /** @description Total number of ability score bonuses gained, added from previous levels. */
      ability_score_bonuses?: number;
      /** @description Proficiency bonus for this class at the specified level. */
      prof_bonus?: number;
      /** @description Features automatically gained at this level. */
      features?: components["schemas"]["APIReference"][];
      /** @description Summary of spells known at this level. */
      spellcasting?: {
        cantrips_known?: number;
        spells_known?: number;
        spell_slots_level_1?: number;
        spell_slots_level_2?: number;
        spell_slots_level_3?: number;
        spell_slots_level_4?: number;
        spell_slots_level_5?: number;
        spell_slots_level_6?: number;
        spell_slots_level_7?: number;
        spell_slots_level_8?: number;
        spell_slots_level_9?: number;
      };
      /** @description Class specific information such as dice values for bard songs and number of warlock invocations. */
      class_specific?:
        | {
            rage_count?: number;
            rage_damage_bonus?: number;
            brutal_critical_dice?: number;
          }
        | {
            bardic_inspiration_dice?: number;
            song_of_rest_die?: number;
            magical_secrets_max_5?: number;
            magical_secrets_max_7?: number;
            magical_secrets_max_9?: number;
          }
        | {
            channel_divinity_charges?: number;
            destroy_undead_cr?: number;
          }
        | {
            wild_shape_max_cr?: number;
            wild_shape_swim?: boolean;
            wild_shape_fly?: boolean;
          }
        | {
            action_surges?: number;
            indomitable_uses?: number;
            extra_attacks?: number;
          }
        | {
            ki_points?: number;
            unarmored_movement?: number;
            martial_arts?: {
              dice_count?: number;
              dice_value?: number;
            };
          }
        | {
            aura_range?: number;
          }
        | {
            favored_enemies?: number;
            favored_terrain?: number;
          }
        | {
            sneak_attack?: {
              dice_count?: number;
              dice_value?: number;
            };
          }
        | {
            sorcery_points?: number;
            metamagic_known?: number;
            creating_spell_slots?: {
              spell_slot_level?: number;
              sorcery_point_cost?: number;
            }[];
          }
        | {
            invocations_known?: number;
            mystic_arcanum_level_6?: number;
            mystic_arcanum_level_7?: number;
            mystic_arcanum_level_8?: number;
            mystic_arcanum_level_9?: number;
          }
        | {
            arcane_recover_levels?: number;
          };
    };
    /** @description `Feature`
     *      */
    Feature: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] & {
        /** @description The level this feature is gained. */
        level?: number;
        class?: components["schemas"]["APIReference"];
        subclass?: components["schemas"]["APIReference"];
        parent?: components["schemas"]["APIReference"];
        /**
         * @description The prerequisites for this feature.
         * @example [
         *       {
         *         "type": "level",
         *         "level": 3
         *       },
         *       {
         *         "type": "feature",
         *         "feature": "martial-archetype"
         *       },
         *       {
         *         "type": "spell",
         *         "spell": "shield"
         *       }
         *     ]
         */
        prerequisites?: (
          | {
              type?: string;
              level?: number;
            }
          | {
              type?: string;
              feature?: string;
            }
          | {
              type?: string;
              spell?: string;
            }
        )[];
        /** @description Information specific to this feature. */
        feature_specific?: {
          [key: string]: unknown;
        };
      };
    /** @description `Race`
     *      */
    Race: components["schemas"]["APIReference"] & {
      /** @description Base move speed for this race (in feet per round). */
      speed?: number;
      /** @description Racial bonuses to ability scores. */
      ability_bonuses?: components["schemas"]["AbilityBonus"][];
      /** @description Flavor description of likely alignments this race takes. */
      alignment?: string;
      /** @description Flavor description of possible ages for this race. */
      age?: string;
      /** @description Size class of this race. */
      size?: string;
      /** @description Flavor description of height and weight for this race. */
      size_description?: string;
      /** @description Starting proficiencies for all new characters of this race. */
      starting_proficiencies?: components["schemas"]["APIReference"][];
      /** @description Starting proficiency options for all new characters of this race. */
      starting_proficiency_options?: components["schemas"]["Choice"];
      /** @description Starting languages for all new characters of this race. */
      languages?: components["schemas"]["APIReference"][];
      /** @description Flavor description of the languages this race knows. */
      language_desc?: string;
      /** @description Racial traits that provide benefits to its members. */
      traits?: components["schemas"]["APIReference"][];
      /** @description All possible subraces that this race includes. */
      subraces?: components["schemas"]["APIReference"][];
    };
    AbilityBonus: {
      /** @description Bonus amount for this ability score. */
      bonus?: number;
      ability_score?: components["schemas"]["APIReference"];
    };
    /** @description `Spell`
     *      */
    Spell: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] & {
        /** @description List of descriptions for casting the spell at higher levels. */
        higher_level?: string[];
        /** @description Range of the spell, usually expressed in feet. */
        range?: string;
        /** @description List of shorthand for required components of the spell.
         *     V: verbal
         *     S: somatic
         *     M: material
         *      */
        components?: ("V" | "S" | "M")[];
        /** @description Material component for the spell to be cast. */
        material?: string;
        area_of_effect?: components["schemas"]["AreaOfEffect"];
        /** @description Determines if a spell can be cast in a 10-min(in-game) ritual. */
        ritual?: boolean;
        /** @description How long the spell effect lasts. */
        duration?: string;
        /** @description Determines if a spell needs concentration to persist. */
        concentration?: boolean;
        /** @description How long it takes for the spell to activate. */
        casting_time?: string;
        /** @description Level of the spell. */
        level?: number;
        /** @description Attack type of the spell. */
        attack_type?: string;
        damage?:
          | components["schemas"]["DamageAtCharacterLevel"]
          | components["schemas"]["DamageAtSlotLevel"];
        /** @description Magic school this spell belongs to. */
        school?: components["schemas"]["APIReference"];
        /** @description List of classes that are able to learn the spell. */
        classes?: components["schemas"]["APIReference"][];
        /** @description List of subclasses that have access to the spell. */
        subclasses?: components["schemas"]["APIReference"][];
      };
    /** @description `Subrace`
     *      */
    Subrace: components["schemas"]["APIReference"] & {
      /** @description Description of the subrace. */
      desc?: string;
      /** @description Parent race for the subrace. */
      race?: components["schemas"]["APIReference"];
      /** @description Additional ability bonuses for the subrace. */
      ability_bonuses?: components["schemas"]["AbilityBonus"][];
      /** @description Starting proficiencies for all new characters of the subrace. */
      starting_proficiencies?: components["schemas"]["APIReference"][];
      /** @description Starting languages for all new characters of the subrace. */
      languages?: components["schemas"]["APIReference"][];
      /** @description Starting languages to choose from for the subrace. */
      language_options?: components["schemas"]["Choice"];
      /** @description List of traits that for the subrace. */
      racial_traits?: components["schemas"]["APIReference"][];
    };
    /** @description `Trait`
     *      */
    Trait: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] & {
        /** @description List of `Races` that have access to the trait. */
        races?: components["schemas"]["APIReference"][];
        /** @description List of `Subraces` that have access to the trait. */
        subraces?: components["schemas"]["APIReference"][];
        /** @description List of `Proficiencies` this trait grants. */
        proficiencies?: components["schemas"]["APIReference"][];
        proficiency_choices?: components["schemas"]["Choice"];
        language_options?: components["schemas"]["Choice"];
        /** @description Information specific to this trait */
        trait_specific?:
          | components["schemas"]["Choice"]
          | components["schemas"]["Choice"]
          | {
              /** @description A damage type associated with this trait. */
              "damage-type"?: components["schemas"]["APIReference"];
              /** @description The breath weapon action associated with a draconic ancestry. */
              "breath-weapon"?: {
                name?: string;
                desc?: string;
                area_of_effect?: components["schemas"]["AreaOfEffect"];
                damage?: {
                  damage_at_character_level?: {
                    [key: string]: string;
                  };
                  damage_type?: components["schemas"]["APIReference"];
                };
                dc?: components["schemas"]["DC"];
                /** @description Description of the usage constraints of this action. */
                usage?: {
                  times?: number;
                  type?: string;
                };
              };
            };
      };
    /** @description WeaponProperty */
    WeaponProperty: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"];
    /** @description `Rule`
     *      */
    Rule: components["schemas"]["APIReference"] & {
      /** @description Description of the rule. */
      desc?: string;
      /** @description List of sections for each subheading underneath the rule in the SRD. */
      subsections?: components["schemas"]["APIReference"][];
    };
    /** @description `RuleSection`
     *      */
    RuleSection: components["schemas"]["APIReference"] & {
      /** @description Description of the rule. */
      desc?: string;
    };
    /** @description `Monster`
     *      */
    Monster: components["schemas"]["APIReference"] &
      components["schemas"]["ResourceDescription"] &
      components["schemas"]["MonsterAbility"] & {
        /** @description The image url of the monster. */
        image?: string;
        /**
         * @description The size of the monster ranging from Tiny to Gargantuan."
         * @enum {string}
         */
        size?: "Tiny" | "Small" | "Medium" | "Large" | "Huge" | "Gargantuan";
        /** @description The type of monster. */
        type?: string;
        /** @description The sub-category of a monster used for classification of monsters." */
        subtype?: string;
        /** @description A creature's general moral and personal attitudes. */
        alignment?: string;
        /** @description The difficulty for a player to successfully deal damage to a monster. */
        armor_class?: components["schemas"]["MonsterArmorClass"][];
        /** @description The hit points of a monster determine how much damage it is able to take before it can be defeated. */
        hit_points?: number;
        /** @description The hit die of a monster can be used to make a version of the same monster whose hit points are determined by the roll of the die. For example: A monster with 2d6 would have its hit points determine by rolling a 6 sided die twice. */
        hit_dice?: string;
        /** @description The roll for determining a monster's hit points, which consists of the hit dice (e.g. 18d10) and the modifier determined by its Constitution (e.g. +36). For example, 18d10+36 */
        hit_points_roll?: string;
        /** @description A list of actions that are available to the monster to take during combat. */
        actions?: components["schemas"]["MonsterAction"][];
        /** @description A list of legendary actions that are available to the monster to take during combat. */
        legendary_actions?: components["schemas"]["MonsterAction"][];
        /** @description A monster's challenge rating is a guideline number that says when a monster becomes an appropriate challenge against the party's average level. For example. A group of 4 players with an average level of 4 would have an appropriate combat challenge against a monster with a challenge rating of 4 but a monster with a challenge rating of 8 against the same group of players would pose a significant threat. */
        challenge_rating?: number;
        /** @description A monster's proficiency bonus is the number added to ability checks, saving throws and attack rolls in which the monster is proficient, and is linked to the monster's challenge rating. This bonus has already been included in the monster's stats where applicable. */
        proficiency_bonus?: number;
        /** @description A list of conditions that a monster is immune to. */
        condition_immunities?: components["schemas"]["APIReference"][];
        /** @description A list of damage types that a monster will take double damage from. */
        damage_immunities?: string[];
        /** @description A list of damage types that a monster will take half damage from. */
        damage_resistances?: string[];
        /** @description A list of damage types that a monster will take double damage from. */
        damage_vulnerabilities?: string[];
        /** @description List of other related monster entries that are of the same form. Only applicable to Lycanthropes that have multiple forms. */
        forms?: components["schemas"]["APIReference"][];
        /** @description The languages a monster is able to speak. */
        languages?: string;
        /** @description A list of proficiencies of a monster. */
        proficiencies?: components["schemas"]["MonsterProficiency"][];
        /** @description A list of reactions that is available to the monster to take during combat. */
        reactions?: components["schemas"]["MonsterAction"][];
        /** @description Monsters typically have a passive perception but they might also have other senses to detect players. */
        senses?: components["schemas"]["MonsterSense"];
        /** @description A list of the monster's special abilities. */
        special_abilities?: components["schemas"]["MonsterSpecialAbility"][];
        /** @description Speed for a monster determines how fast it can move per turn. */
        speed?: {
          /** @description All creatures have a walking speed, simply called the monster’s speed. Creatures that have no form of ground-based locomotion have a walking speed of 0 feet. */
          walk?: string;
          /** @description A monster that has a burrowing speed can use that speed to move through sand, earth, mud, or ice. A monster can’t burrow through solid rock unless it has a special trait that allows it to do so. */
          burrow?: string;
          /** @description A monster that has a climbing speed can use all or part of its movement to move on vertical surfaces. The monster doesn’t need to spend extra movement to climb. */
          climb?: string;
          /** @description A monster that has a flying speed can use all or part of its movement to fly. */
          fly?: string;
          /** @description A monster that has a swimming speed doesn’t need to spend extra movement to swim. */
          swim?: string;
        };
        /** @description The number of experience points (XP) a monster is worth is based on its challenge rating. */
        xp?: number;
      };
    /** @description `Monster Ability`
     *      */
    MonsterAbility: {
      /** @description A monster's ability to charm or intimidate a player. */
      charisma?: number;
      /** @description How sturdy a monster is." */
      constitution?: number;
      /** @description The monster's ability for swift movement or stealth */
      dexterity?: number;
      /** @description The monster's ability to outsmart a player. */
      intelligence?: number;
      /** @description How hard a monster can hit a player. */
      strength?: number;
      /** @description A monster's ability to ascertain the player's plan. */
      wisdom?: number;
    };
    /** @description Action available to a `Monster` in addition to the standard creature actions. */
    MonsterAction: {
      name?: string;
      desc?: string;
      action_options?: components["schemas"]["Choice"];
      actions?: components["schemas"]["MonsterMultiAttackAction"][];
      options?: components["schemas"]["Choice"];
      multiattack_type?: string;
      attack_bonus?: number;
      dc?: components["schemas"]["DC"];
      attacks?: components["schemas"]["MonsterAttack"][];
      damage?: components["schemas"]["Damage"][];
    };
    /** @description The armor class of a monster. */
    MonsterArmorClass:
      | {
          /** @enum {string} */
          type?: "dex";
          value?: number;
          desc?: string;
        }
      | {
          /** @enum {string} */
          type?: "natural";
          value?: number;
          desc?: string;
        }
      | {
          /** @enum {string} */
          type?: "armor";
          value?: number;
          armor?: components["schemas"]["APIReference"][];
          desc?: string;
        }
      | {
          /** @enum {string} */
          type?: "spell";
          value?: number;
          spell?: components["schemas"]["APIReference"];
          desc?: string;
        }
      | {
          /** @enum {string} */
          type?: "condition";
          value?: number;
          condition?: components["schemas"]["APIReference"];
          desc?: string;
        };
    MonsterAttack: {
      name?: string;
      dc?: components["schemas"]["DC"];
      damage?: components["schemas"]["Damage"];
    };
    MonsterMultiAttackAction: {
      action_name?: string;
      count?: number;
      /** @enum {string} */
      type?: "melee" | "ranged" | "ability" | "magic";
    };
    MonsterProficiency: {
      value?: number;
      proficiency?: components["schemas"]["APIReference"];
    };
    MonsterSense: {
      /** @description The monster's passive perception (wisdom) score. */
      passive_perception?: number;
      /** @description A monster with blindsight can perceive its surroundings without relying on sight, within a specific radius. */
      blindsight?: string;
      /** @description A monster with darkvision can see in the dark within a specific radius. */
      darkvision?: string;
      /** @description A monster with tremorsense can detect and pinpoint the origin of vibrations within a specific radius, provided that the monster and the source of the vibrations are in contact with the same ground or substance. */
      tremorsense?: string;
      /** @description A monster with truesight can, out to a specific range, see in normal and magical darkness, see invisible creatures and objects, automatically detect visual illusions and succeed on saving throws against them, and perceive the original form of a shapechanger or a creature that is transformed by magic. Furthermore, the monster can see into the Ethereal Plane within the same range. */
      truesight?: string;
    };
    MonsterSpecialAbility: {
      name?: string;
      desc?: string;
      attack_bonus?: number;
      damage?: components["schemas"]["Damage"];
      dc?: components["schemas"]["DC"];
      spellcasting?: components["schemas"]["MonsterSpellcasting"];
      usage?: components["schemas"]["MonsterUsage"];
    };
    MonsterSpell: {
      name?: string;
      level?: number;
      url?: string;
      usage?: components["schemas"]["MonsterUsage"];
    };
    MonsterSpellcasting: {
      ability?: components["schemas"]["APIReference"];
      dc?: number;
      modifier?: number;
      components_required?: string[];
      school?: string;
      slots?: {
        [key: string]: number;
      };
      spells?: components["schemas"]["MonsterSpell"][];
    };
    MonsterUsage: {
      /** @enum {string} */
      type?: "at will" | "per day" | "recharge after rest" | "recharge on roll";
      rest_types?: string[];
      times?: number;
    };
    /** @description `SpellPrerequisite`
     *      */
    SpellPrerequisite: components["schemas"]["APIReference"] & {
      /** @description The type of prerequisite. */
      type?: string;
    };
    "error-response": {
      error: string;
    };
    /** @description `DC`
     *      */
    DC: {
      dc_type?: components["schemas"]["APIReference"];
      /** @description Value to beat */
      dc_value?: number;
      /** @description Result of a successful save. Can be \"none\", \"half\", or \"other\" */
      success_type?: string;
    };
    /** @description `Option Set`
     *      */
    OptionSet:
      | {
          /** @description Type of option set; determines other attributes. */
          option_set_type?: string;
          /** @description Array of options to choose from. */
          options?: components["schemas"]["Option"][];
        }
      | {
          /** @description Type of option set; determines other attributes. */
          option_set_type?: string;
          equipment_category?: components["schemas"]["APIReference"];
        }
      | {
          /** @description Type of option set; determines other attributes. */
          option_set_type?: string;
          /** @description A reference (by URL) to a collection in the database. */
          resource_list_url?: string;
        };
    /** @description `Option`
     *      */
    Option:
      | {
          /** @description Type of option; determines other attributes. */
          option_type?: string;
          item?: components["schemas"]["APIReference"];
        }
      | {
          /** @description Type of option; determines other attributes. */
          option_type?: string;
          /** @description The name of the action. */
          action_name?: string;
          /** @description The number of times this action can be repeated if chosen. */
          count?: number;
          /**
           * @description For attack options that can be melee, ranged, abilities, or thrown.
           * @enum {string}
           */
          type?: "melee" | "ranged" | "ability" | "magic";
        }
      | {
          /** @description Type of option; determines other attributes. */
          option_type?: string;
          items?: components["schemas"]["Option"][];
        }
      | {
          /** @description Type of option; determines other attributes. */
          option_type?: string;
          choice?: components["schemas"]["Choice"];
        }
      | {
          /** @description Type of option; determines other attributes. */
          option_type?: string;
          /** @description The string. */
          string?: string;
        }
      | {
          /** @description Type of option; determines other attributes. */
          option_type?: string;
          /** @description A description of the ideal. */
          desc?: string;
          /** @description A list of alignments of those who might follow the ideal. */
          alignments?: components["schemas"]["APIReference"][];
        }
      | {
          /** @description Type of option; determines other attributes. */
          option_type?: string;
          /** @description Count */
          count?: number;
          of?: components["schemas"]["APIReference"];
        }
      | {
          /** @description Type of option; determines other attributes. */
          option_type?: string;
          ability_score?: components["schemas"]["APIReference"];
          /** @description The minimum score required to satisfy the prerequisite. */
          minimum_score?: number;
        }
      | {
          /** @description Type of option; determines other attributes. */
          option_type?: string;
          ability_score?: components["schemas"]["APIReference"];
          /** @description The bonus being applied to the ability score */
          bonus?: number;
        }
      | {
          /** @description Type of option; determines other attributes. */
          option_type?: string;
          /** @description Name of the breath */
          name?: string;
          dc?: components["schemas"]["DC"];
          /** @description Damage dealt by the breath attack, if any. */
          damage?: components["schemas"]["Damage"][];
        }
      | {
          /** @description Type of option; determines other attributes. */
          option_type?: string;
          damage_type?: components["schemas"]["APIReference"];
          /** @description Damage expressed in dice (e.g. "13d6"). */
          damage_dice?: string;
          /** @description Information regarding the damage. */
          notes?: string;
        };
    /** @description `ClassLevelSpell`
     *      */
    ClassLevelSpell: components["schemas"]["APIReference"] & {
      /** @description The level of the spell slot used to cast the spell. */
      level?: number;
    };
    /** @description `ClassSpellList`
     *      */
    ClassSpellList: {
      /** @description Total number of resources available. */
      count?: number;
      results?: components["schemas"]["ClassLevelSpell"][];
    };
  };
  responses: never;
  parameters: {
    /** @description The `index` of the ability score to get.
     *      */
    "ability-score-index": "cha" | "con" | "dex" | "int" | "str" | "wis";
    /** @description The `index` of the alignment to get.
     *      */
    "alignment-index":
      | "chaotic-neutral"
      | "chaotic-evil"
      | "chaotic-good"
      | "lawful-neutral"
      | "lawful-evil"
      | "lawful-good"
      | "neutral"
      | "neutral-evil"
      | "neutral-good";
    /** @description The `index` of the language to get.
     *      */
    "language-index":
      | "abyssal"
      | "celestial"
      | "common"
      | "deep-speech"
      | "draconic"
      | "dwarvish"
      | "elvish"
      | "giant"
      | "gnomish"
      | "goblin"
      | "halfling"
      | "infernal"
      | "orc"
      | "primordial"
      | "sylvan"
      | "undercommon";
    /** @description The `index` of the proficiency to get.
     *
     *     Available values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `proficiencies`.
     *      */
    "proficiency-index": string;
    /** @description The `index` of the skill to get.
     *      */
    "skill-index":
      | "acrobatics"
      | "animal-handling"
      | "arcana"
      | "athletics"
      | "deception"
      | "history"
      | "insight"
      | "intimidation"
      | "investigation"
      | "medicine"
      | "nature"
      | "perception"
      | "performance"
      | "persuasion"
      | "religion"
      | "sleight-of-hand"
      | "stealth"
      | "survival";
    /** @description The `index` of the class to get.
     *      */
    "class-index":
      | "barbarian"
      | "bard"
      | "cleric"
      | "druid"
      | "fighter"
      | "monk"
      | "paladin"
      | "ranger"
      | "rogue"
      | "sorcerer"
      | "warlock"
      | "wizard";
    /** @description The `index` of the background to get.
     *      */
    "background-index": "acolyte";
    /** @description The `index` of the weapon property to get.
     *      */
    "weapon-property-index":
      | "ammunition"
      | "finesse"
      | "heavy"
      | "light"
      | "loading"
      | "monk"
      | "reach"
      | "special"
      | "thrown"
      | "two-handed"
      | "versatile";
    "class-level": number;
    "spell-level": number;
    /** @description The `index` of the condition to get.
     *      */
    "condition-index":
      | "blinded"
      | "charmed"
      | "deafened"
      | "exhaustion"
      | "frightened"
      | "grappled"
      | "incapacitated"
      | "invisible"
      | "paralyzed"
      | "petrified"
      | "poisoned"
      | "prone"
      | "restrained"
      | "stunned"
      | "unconscious";
    /** @description The `index` of the damage type to get.
     *      */
    "damage-type-index":
      | "acid"
      | "bludgeoning"
      | "cold"
      | "fire"
      | "force"
      | "lightning"
      | "necrotic"
      | "piercing"
      | "poison"
      | "psychic"
      | "radiant"
      | "slashing"
      | "thunder";
    /** @description The `index` of the magic school to get.
     *      */
    "magic-school-index":
      | "abjuration"
      | "conjuration"
      | "divination"
      | "enchantment"
      | "evocation"
      | "illusion"
      | "necromancy"
      | "transmutation";
    /** @description The `index` of the equipment to get.
     *
     *     Available values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `equipment`.
     *      */
    "equipment-index": string;
    /**
     * @description The `index` of the feature to get.
     *
     *     Available values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `features`.
     *
     * @example action-surge-1-use
     */
    "feature-index": string;
    /** @description The `index` of the rule to get.
     *      */
    "rule-index":
      | "adventuring"
      | "appendix"
      | "combat"
      | "equipment"
      | "spellcasting"
      | "using-ability-scores";
    /** @description The `index` of the rule section to get.
     *      */
    "rule-section-index":
      | "ability-checks"
      | "ability-scores-and-modifiers"
      | "actions-in-combat"
      | "activating-an-item"
      | "advantage-and-disadvantage"
      | "attunement"
      | "between-adventures"
      | "casting-a-spell"
      | "cover"
      | "damage-and-healing"
      | "diseases"
      | "fantasy-historical-pantheons"
      | "madness"
      | "making-an-attack"
      | "mounted-combat"
      | "movement"
      | "movement-and-position"
      | "objects"
      | "poisons"
      | "proficiency-bonus"
      | "resting"
      | "saving-throws"
      | "sentient-magic-items"
      | "standard-exchange-rates"
      | "the-environment"
      | "the-order-of-combat"
      | "the-planes-of-existence"
      | "time"
      | "traps"
      | "underwater-combat"
      | "using-each-ability"
      | "wearing-and-wielding-items"
      | "what-is-a-spell";
    /** @description The `index` of the race to get.
     *      */
    "race-index":
      | "dragonborn"
      | "dwarf"
      | "elf"
      | "gnome"
      | "half-elf"
      | "half-orc"
      | "halfling"
      | "human"
      | "tiefling";
    /** @description The `index` of the subclass to get.
     *      */
    "subclass-index":
      | "berserker"
      | "champion"
      | "devotion"
      | "draconic"
      | "evocation"
      | "fiend"
      | "hunter"
      | "land"
      | "life"
      | "lore"
      | "open-hand"
      | "thief";
    /** @description The `index` of the subrace to get.
     *      */
    "subrace-index":
      | "high-elf"
      | "hill-dwarf"
      | "lightfoot-halfling"
      | "rock-gnome";
    /** @description The `index` of the `Trait` to get. */
    "trait-index":
      | "artificers-lore"
      | "brave"
      | "breath-weapon"
      | "damage-resistance"
      | "darkvision"
      | "draconic-ancestry"
      | "draconic-ancestry-black"
      | "draconic-ancestry-blue"
      | "draconic-ancestry-brass"
      | "draconic-ancestry-bronze"
      | "draconic-ancestry-copper"
      | "draconic-ancestry-gold"
      | "draconic-ancestry-green"
      | "draconic-ancestry-red"
      | "draconic-ancestry-silver"
      | "draconic-ancestry-white"
      | "dwarven-combat-training"
      | "dwarven-resilience"
      | "dwarven-toughness"
      | "elf-weapon-training"
      | "extra-language"
      | "fey-ancestry"
      | "gnome-cunning"
      | "halfling-nimbleness"
      | "hellish-resistance"
      | "high-elf-cantrip"
      | "infernal-legacy"
      | "keen-senses"
      | "lucky"
      | "menacing"
      | "naturally-stealthy"
      | "relentless-endurance"
      | "savage-attacks"
      | "skill-versatility"
      | "stonecunning"
      | "tinker"
      | "tool-proficiency"
      | "trance";
    /** @description The `index` of the `Monster` to get.
     *      */
    "monster-index": string;
    /** @description The `index` of the `Spell` to get.
     *
     *     Available values can be found in the [`ResourceList`](#get-/api/-endpoint-) for `spells`.
     *      */
    "spell-index": string;
    /** @description The level or levels to filter on. */
    "level-filter": number[];
    /** @description The magic school or schools to filter on. */
    "school-filter": string[];
    /** @description The challenge rating or ratings to filter on. */
    "challenge-rating-filter": number[];
    /** @description Adds subclasses for class to the response */
    "levels-subclass-filter": string;
    "base-endpoint-index":
      | "ability-scores"
      | "alignments"
      | "backgrounds"
      | "classes"
      | "conditions"
      | "damage-types"
      | "equipment"
      | "equipment-categories"
      | "feats"
      | "features"
      | "languages"
      | "magic-items"
      | "magic-schools"
      | "monsters"
      | "proficiencies"
      | "races"
      | "rule-sections"
      | "rules"
      | "skills"
      | "spells"
      | "subclasses"
      | "subraces"
      | "traits"
      | "weapon-properties";
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;
export type operations = Record<string, never>;
